import streamlit as st
import pandas as pd
from backend.views import pegar_df_preco_corrigido, pegar_df_preco_diversos, validar_data
from backend.routers import Comparacao_graficos
from log_config.logging_config import logger  # Importa o logger centralizado

def Pagina_grafico(restrict_access=False):
    """
    Exibe a p√°gina de gr√°ficos na aplica√ß√£o Streamlit, permitindo ao usu√°rio analisar 
    e comparar os retornos acumulados da carteira de a√ß√µes com o IBOVESPA.

    Funcionalidades:
        - Verifica se a estrat√©gia est√° preenchida antes de continuar.
        - Permite ao usu√°rio selecionar um per√≠odo de an√°lise com datas de in√≠cio e fim.
        - Gera gr√°ficos comparativos do retorno acumulado da carteira e do IBOVESPA.
        - Valida as datas selecionadas pelo usu√°rio.

    Args:
        restrict_access (bool, optional): Flag para restringir o acesso √† p√°gina. Padr√£o √© False.

    Returns:
        None
    """
    logger.info("P√°gina Gr√°ficos carregada.")  # Registro de carregamento da p√°gina
    
    # T√≠tulo sempre vis√≠vel
    st.title("üìä An√°lise de Gr√°ficos")
    st.caption("""
    Bem-vindo √† se√ß√£o de **Gr√°ficos**! Aqui voc√™ pode visualizar e comparar a varia√ß√£o dos retornos acumulados da sua carteira de a√ß√µes com o IBOVESPA.  
    Escolha o per√≠odo desejado para realizar uma an√°lise detalhada.
    ---
    """)

    if not st.session_state.get("estrategia_preenchida", False):
        logger.warning("A estrat√©gia n√£o foi preenchida.")
        with st.spinner("‚è≥ Esperando estrat√©gia..."):
            st.error("‚ùå Voc√™ precisa preencher a Estrat√©gia antes de acessar os Gr√°ficos.")
            st.info("‚û°Ô∏è V√° at√© a aba **Estrat√©gia** para configurar sua carteira de a√ß√µes.")
        return

    logger.info("Estrat√©gia preenchida. Continuando para an√°lise de gr√°ficos.")
    
    acoes_carteira = st.session_state.acoes_carteira
    if acoes_carteira is None:
        logger.error("A√ß√µes da carteira n√£o foram configuradas.")
        st.error("‚ö†Ô∏è Nenhuma carteira foi gerada. Por favor, configure sua estrat√©gia antes de acessar os gr√°ficos.")
        return

    st.markdown("### üìÖ Selecione o Per√≠odo de An√°lise")
    data_inicio_fim = st.date_input(
        "Escolha as datas de in√≠cio e fim para an√°lise:",
        value=(pd.to_datetime('today'), pd.to_datetime('today')),
        key="data_periodo"
    )

    if len(data_inicio_fim) == 2:
        data_ini, data_fim = data_inicio_fim
        try:
            validar_data(data_ini)
            validar_data(data_fim)
            logger.info(f"Per√≠odo selecionado: {data_ini} - {data_fim}")

            if data_ini > data_fim:
                logger.warning("Data de fim √© anterior √† data de in√≠cio.")
                st.error("‚ö†Ô∏è A data de fim deve ser posterior √† data de in√≠cio.")
                return

            if st.button("Gerar Gr√°ficos"):
                try:
                    df_carteira = pegar_df_preco_corrigido(data_ini, data_fim, acoes_carteira)
                    df_ibov = pegar_df_preco_diversos(data_ini, data_fim)
                    logger.info("Gr√°ficos gerados com sucesso.")
                    st.subheader("üìä Comparativo: Retorno Acumulado Carteira x IBOVESPA")
                    Comparacao_graficos(df_carteira, df_ibov)
                    st.success("‚úÖ Gr√°ficos gerados com sucesso!")
                except Exception as e:
                    logger.error(f"Erro ao gerar gr√°ficos: {e}")
                    st.error(f"‚ùå Erro ao gerar gr√°ficos: {e}")
        except Exception as e:
            logger.error(f"Erro ao processar as datas: {e}")
            st.error(f"‚ùå Erro ao processar as datas: {e}")
